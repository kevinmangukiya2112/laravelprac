We can make new view or controller or component or rule using cmd where we need to use make functionality of artisan services.
we can get url using URL functionality or url() functionality(URL::current(),URL::previous(),url()->current()).
We can use view in controller using facades/view functionality.
we can route to view using Route::view('url','view') OR Route::get('url', function(){
    return view('view');
})
we can route to view with params using Route::view('url/param','view') OR Route::get('url', function($params){
    return view('view',['param' => $params]); // here we have to use param in view not $params
})
we can redirect to any view to another using Route::redirect('redirected','redirect').
we can make dynamic url using URL functionality functionality(URL::to('view')).
we can validate form submission using Request object like :: requestobj->validate('inputname' => 'required').
we can make custom validation rules using new rules or we can publish it by changing default validation massages from lang/en/validation.
we can use one view in another view direct usinf include functionality of blade templates(@include).

we have @if @else @endif @for @endfor @foreach @endforeach @include {{$variable}} in blade templates for php.
we can make named route using name function of route (Route::view('url','view')->name('namedRoute)). 
    // now in any view or controller we can use namedRoute for these view

we can use controller in route file using
    Route::get('url',[ControllerName::class,'functionname']);

we can redirect form controller using redirect()->to('view);
    also for named route to_route('namedRoute);
    also we can pass params from controller to namedRoute like to_route('namedRoute',["name"=>"kevin"]);
        now we can easily use these name from params to any view.

we have here group prefix for same prefix routes
    for example: if i have 100s of routes starting with studen or school or college etc
        then i can put all of them in same grop prefix so i not need to define prefix every time in their route and also i can find all route at one place.
        for these we can use simple prefix functionality
            like: Route::prefix('commonprefix')->group(function(){
                Route::get('/routeafterprefix1','view or controller');
                Route::get('/routeafterprefix2','view or controller');
            });
same as prefix we have controller group for routes where same controller for routes
    for example: if i have one controller and there is lot's of function in it and lot's of routes are using those functions
        than i can put all the routes in same group of controller so i can easily identify and change same controller routes.
        for these we can use simple controlelr functionality
            like: Route::controller(controllername::class)->group(function(){
                Route::get('route1', 'functionofcontroller1');
                Route::get('route2', 'functionofcontroller2');
            });

Here also we can get parameters same as simple routes for both group prefix and group controlelr

we can make middleware same as other like view controller we have all middleware in app http middleware folder 
    in laravel 10 we can use middleware globaly with regestring in kernel.php file and than 
        use it app->singleton(
            namespace;
            function(){
                return middleware;
            }
        )
    in laravel 11 we can use middleware globaly with with just app->withmiddleware(middleware $middleware){
        $middleware->append(middlewarename::class);
    };
    but for these we need to add it in app.php just by use namespace;
Also we have $request object of http request we can get params from here in middleware file and we can use our conditions here.

For group middleware in laravel 10 we need to add new group of middleware to kernel file and add middlewares to it 
In laravel 11 we just have to use $app->withmiddleware(function(middleware $middleware){
    $middleware->appendtogroup('check1(it a name which we will use for these group)',[
            middleware1::class,
            middleware2::class,
        ]);
    });
    same here also for that we need to add middlewares to app.php file and than now we can use these group in web.php file simply by append it after route
    like these 
    Route::get('/','view')->middleware('middlewarename or middlewaregroup');

also we can made middleware group same as other group like route prefix and controller group 
    Route::middleware('middlewarename or middlewaregroup')->group(
        group of routes or single route on which you want to apply.
    );

And if we want to apply middleware on specific route and not globaly than we have to first import it in web.php using use namespace;
    then apply middleware like these: Route::view('route','view')->middleware(middleware::class); // same for using get or post method 
    and also same we can apply it on group of routes.
    Also we can apply multiple middlewares on route and group of routes same as these just we have to pass multiple middleware in array 
    like these: Route::view('route','view')->middleware([middleware1::class,middleware2::class]);
        but in laravel 10 we have to register every middleware in the middleware\kernel if we want to use single middleware than in $middleware var 
        or group than add in group of middleware.
    in laravel 11 we just have to import middleware using use namespace; than add class in middleware at the end of route.

in laravel we can use migrate to create table also we have to add database type means sql,mongo etc and database name pass url to env file.

than we can made tables using migrate and we can connect to db and perform actions on db using Illuminate\Support\facades\DB;
    than we just have to use DB::select for example.

here in laravel we call model as eloquent model whihch is similar as model in other framworks
    also if we have table name like students and we will create model with name student than it will automatic connect to students table also we creates model 
    with first capital letter.
    we can easily use model to controller just by call it by name space like \App\Models\Modelname
        now after model name we can use actions by :: 
            like ::all() these will fetch all the data from students table.
            now same as return view with data from controller we can pass these data to view and than show there.
    
    Also if we don't have name similarity in table name and model name than we can declare table name in model in protected variable $table = "unsimilar_table";
Also we can call function from model in controller just we have to call model from controller through it's object 
    like these: controller function(){
        $model = new \App\Models\ModelName; //it will return model object
        $model->functionname(); //it will call function from Models
    }
Also same in model
    like these: view file 
    {{$model = new \App\Models\ModelName; //it will return model object}}
    {{$model->functionname(); //it will call function from Models}} 
    // here just we have to follow blade template syntax and that's all.